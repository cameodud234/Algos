package com.camdev.maven.algorithms;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.stream.Stream;

import org.junit.jupiter.params.provider.Arguments;

public class SortTestCases {
	
	public static Stream<Arguments> listArgs(){
		return Stream.of(
			Arguments.of(new ArrayList<Integer>(Arrays.asList(1,2,34,4,5))),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(1,2,3,4,5))),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(1))),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(76,3,7,56,36,85,2,45))),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(5,5,5,5,5))),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(-100,-31,-5,2,3,3,3,3,3,3,4,5))),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(-31,-100,3,3,3,3,3,3,5,4,2,-5))),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(-31,-100,3,3,3,3,3,3,5,4,4,4,4,2,-5))),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(1008, 1314, -2620, 235, -263, -2077, -884, 885, -1778, -1774, 1639, -2094, -2468, 797, 518, -2321, 290, -3639, -2247, -1135, -2957, -1617, -3452, 1829, 3387, -1650, 2892, 856, 267, -2300, 3614, -622, 4, 3795, -165, 1223, -1117, -545, -2539, 1778, 3242, -327, 1495, 1615, 3053, -2663, -1053, 2776, -3298, 1573, 1996, -1144, 3477, -3759, -3221, 2105, 2600, -2291, 1353, 1360, -3036, -2241, 377, -1020, -2885, -2449, -391, 1905, -3045, 2458, 2309, 1324, -1251, -3837, -3708, -460, 645, -420, -2030, 1278, 2824, 3514, 1250, -3947, 184, -3733, -2984, 2716, 2210, -2047, 1639, 1546, 1923, 1329, 411, 2329, -1614, 1821, 1553, -1015, -3158, 1530, -707, 1965, 2566, 3909, -1525, 3779, -635, 3569, 1225, -3744, -2202, 1642, -184, 3229, -1062, 1576, 2095, 512, 1491, 78, 3186, 2205, -245, 2075, -1386, 2149, 234, 99, -1677, -2795, 3824, 1755, -3487, 863, -752, 701, -1082, -803, -2117, 1718, -1578, 166, 3643, -1759, -2755, -2706, 72, -953, -134, 2011, -1843, -2419, -643, 832, 1966, -2349, -1990, 132, -174, -3107, -3644, -323, 932, 2702, -228, -2887, -3007, 527, -3221, 99, 2850, 3731, 17, -3930, 143, -2155, -2557, -2066, -159, 3635, -3506, 1357, 675, -2379, -3645, 2289, 1222, 3513, 2380, 1862, 1566, -3431, -1979, 2372, 1542, -3832, -2768, -1142, 170, -608, 438, -1594, -2768, -2905, -2550, 1807, 3644, 841, -2380, -3268, 2040, 1725, 19, 3121, -2093, -923, 490, -3945, -284, 972, 2599, -803, 3293, -2299, -2407, -1451, 1923, -3141, -1284, -2176, 3703, 1143, 3283, -1290, 47, 1962, -3506, 1919, -1917, 2412, 2772, 780, 3844, -2209, 2420, -1128, 1312, 174, -1843, 813, -1405, 2569, 1441, 3384, -2910, 3760, -1086, -1007, 3694, -2887, 1243, -2223, -1810, 2407, 3059, 2577, -3934, 3100, -3079, 3756, 440, 104, 2408, -1928, 1529, 1887, -1910, 3387, -3462, -2128, -409, 1935, -2163, -1688, 2316, -718, 1143, -1338, 3718, -1327, -2822, -554, 3502, -3045, -578, 1634, -353, 3581, 2609, 738, 1123, -2555, -270, 844, 731, 1797, -1847, 701, -1492, 42, 558, 713, 801, -2603, 1474, 1492, -1093, 3368, 1397, -1898, 719, -2631, -112, -761, -2183, 561, 1292, 449, 3974, 464, -3055, -3491, 825, -5, 1966, 499, -3875, -3630, 3322, -3844, -1511, -3832, 204, -1652, 2741, -1980, -1554, -2653, 2989, 1661, -283, 994, 2173, -318, -56, 3267, 2830, 3917, 1442, -1613, 3259, -811, -2889, 2116, -2078, 103, 1156, 2693, -1855, 1075, 424, -2856, -2674, -75, 3410, -499, 80, -1377, -1879, -1374, 1952, -3168, -125, 2624, -1479, -384, -3795, -643, -1370, -559, -1862, 2887, 744, 1745, -2825, 245, -3478, 748, 2119, -2010, 1003, 994, -2269, 702, -253, 1676, -1133, -2786, -1624, 458, 79, -1758, -3190, 2737, -3447, 61, 2145, -3380, 1599, 817, -2019, -12, 822, 1412, 910, -183, 821, -1766, 1549, -2893, -879, 2040, -1328, -3170, 2745, 3597, -3705, 970, -2082, 2326, -3918, -131, 1037, 3789, 1434, -2121, -3432, -3581, 3586, -1869, -86, -3926, -2934, 646, 3036, -2296, 38, -3665, -3630, -3735, -3870, 3611, -742, 52, -1715, 2634, -3168, 1691, -815, -1762, 2622, 2563, 2583, -3912, -3022, 3327, 2790, -1003, 3948, 1168, -2454, 494, 89, -908, -1516, 3534, -580, -2596, -2062, 2217, -677, -2366, 2775, -394, 3208, -1685, -954, -139, -936, -1280, 2536, 872, -1740, -3433, 1290, -1786, 1108, -1539, 23, 697, 3256, -3636, -1865, -1821, -58, 2289, -968, 1360, 770, 1342, 1491, -1706, 1942, 1987, -657, -2322, 2776, 962, -2856, -642, -898, -3767, -1040, 91, -2750, 2194, 2276, 3919, 573, 2909, -2707, -71, -1764, 1550, -2554, -3019, 391, -2405, 594, -651, -245, 3994, -3981, -3253, -2651, 363, 3419, -1662, 3998, 143, 900, -1518, -1800, 1286, 1871, 1531, -1902, 2743, -694, -43, 3438, 275, -900, 381, 2532, 1862, -2575, -1234, 2769, -1247, -2163, 2886, 1745, 3788, 1808, -117, -1617, 1910, 2338, -2296, 3141, 3973, -1730, 1884, -499, 3598, -1165, 1030, -2173, 3982, -1725, 2179, -3260, 2095, -1445, -606, -1618, -1409, 602, 728, 718, -2375, -3384, -640, 2722, 366, -3949, -1684, -3690, 970, -3755, -142, 958, 394, 3392, 2279, -212, 95, 1554, 354, -3548, 2290, 583, -3449, -693, -887, -1981, -1615, 1704, 3384, 999, -351, 1104, -2882, 1217, 2247, 3304, 2114, 346, 3696, -2645, 2701, -1963, -2378, -1044, 1226, -1534, 3835, 1140, 1013, 2645, -1784, -3849, -2778, 3959, 1766, -1842, -3427, 3056, 2451, -393, -939, 1015, 560, 2807, 210, 930, -1779, 118, -2671, 1719, -2469, -2717, 2538, 550, -597, -2664, -3573, 2164, 3127, -1198, -2207, -2868, 748, 977, -2735, -1004, -2789, 2059, 3030, -1282, -3154, 2156, -318, 3482, 529, -3690, -3367, 1775, -1741, -2451, -2512, -3401, -3287, 1859, -3986, 1673, 394, -2098, -137, 25, -242, -774, -3992, -3325, 1564, 3069, -2293, 1060, -48, -2198, 2165, 2138, 3788, -2743, -1402, 623, -2363, 2122, 3349, -3847, -679, -1751, 2336, -3388, 649, -1524, -3356, 237, 1800, -3620, -110, -584, 1289, 31, 2323, -3878, 2444, -2590, 1765, -1443, -2888, -3319, -3180, 1161, 910, 2423, 3925, 2264, 2959, 1561, 50, -636, 3777, -106, -3740, 2456, 318, 2010, -1512, -2434, 2191, 1726, -3713, 2591, -1012, 3396, 3131, 1645, 1689, 2761, -1724, 1083, 9, -1656, 2411, 3575, -1434, -100, 964, -1581, 2173, -1668, -1697, -3583, -1481, -1247, 149, -1102, -3352, 1061, 1465, 2615, -1002, 3695, -2707, 3792, -1951, 1150, -2327, 483, 2801, -1641, 3712, -2449, -2967, -642, -1196, 2092, 1977, -3854, 1304, 470, -3815, 1033, -3529, -3646, -2335, 2573, -1849, 3530, -885, -2575, -1835, -3608, 1279, 1903, -2229, 570, -9, 2293, 1747, 2317, -553, -733, -926, 1939, -2493, 3085, -3806, -1152, -1280, -153, -3601, -3384, -2356, 2491, -1160, -956, 3607, 2422, 978, -3741, -2964, -1211, 362, -2569, 972, 3479, 707, 699, -3166, -3346, -369, -1460, 2935, -3737, -3960, 834, -3584, 1453, 1800, 211, 78, 1649, -3281, 3668, 3143, -3180, -3021, -3557, -1536, -2155, -3889, 2892, 1765, -809, -2251, -3219, -2303, 1175, 119, 3818, -359, 2082, -1868, 313, -3798, -836, 1111, 2852, 1541, 2214, -2987, 0, -264, -3971, -1576, -3589, 2195, -654, 2799, 507, -1473, -2375, -569, -2484, -1525, 654, -2588, 890, -697, -1180, 3552, 3529, 3264, -3317, 2052, 2113, -3110, 1436, -1455, 1050, 1926, 3782, -3760, 3777, 3981, -3110, 3094, -1368, 3003, -2728, -1337, 1064, 110, -2245, -1205, -3318, -2901, -809, 2614, -3966, 420, 1506, 666, 1038, -2514, 754, -416, -1368, -2403, 2347, 2216, 3916, 2147, 3377, 761, -3941, -3612, -3125, -3082, 1038, 317, -1646, 979, 1241))),
			Arguments.of(new ArrayList<String>(Arrays.asList("cam"))),
			Arguments.of(new ArrayList<String>(Arrays.asList("a", "b", "c", "d"))),
			Arguments.of(new ArrayList<String>(Arrays.asList("a", "b", "e", "c"))),
			Arguments.of(new ArrayList<String>(Arrays.asList("bat", "ant", "dog", "cat", "eel", "ibx", "fox", "gnu", "cow", "pig"))),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(1,2,34,4,5))),
			Arguments.of(new ArrayList<Long>(Arrays.asList(45243L,53L,3426L,66L,7L,34L,77L,887L,56564646L,747478838L,7433374747L,65L,6L))),
			Arguments.of(new LinkedList<Integer>(Arrays.asList(1,2,3,4,5))),
			Arguments.of(new LinkedList<Integer>(Arrays.asList(1,2,34,4,5))),
			Arguments.of(new LinkedList<Integer>(Arrays.asList(1))),
			Arguments.of(new LinkedList<Integer>(Arrays.asList(5,5,5,5,5)))
		);
	}
	
	public static Stream<Arguments> sortListArgs(){
		return Stream.of(
			Arguments.of(new ArrayList<Integer>(Arrays.asList(1,2,3,4,5)), true),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(1,2,34,4,5)), false),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(-100,-31,-5,2,3,3,3,3,3,3,4,5)), true),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(1)), true),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(5,5,5,5,5)), true),
			Arguments.of(new ArrayList<String>(Arrays.asList("cam")), true),
			Arguments.of(new ArrayList<String>(Arrays.asList("a", "b", "c", "d")), true),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(1008, 1314, -2620, 235, -263, -2077, -884, 885, -1778, -1774, 1639, -2094, -2468, 797, 518, -2321, 290, -3639, -2247, -1135, -2957, -1617, -3452, 1829, 3387, -1650, 2892, 856, 267, -2300, 3614, -622, 4, 3795, -165, 1223, -1117, -545, -2539, 1778, 3242, -327, 1495, 1615, 3053, -2663, -1053, 2776, -3298, 1573, 1996, -1144, 3477, -3759, -3221, 2105, 2600, -2291, 1353, 1360, -3036, -2241, 377, -1020, -2885, -2449, -391, 1905, -3045, 2458, 2309, 1324, -1251, -3837, -3708, -460, 645, -420, -2030, 1278, 2824, 3514, 1250, -3947, 184, -3733, -2984, 2716, 2210, -2047, 1639, 1546, 1923, 1329, 411, 2329, -1614, 1821, 1553, -1015, -3158, 1530, -707, 1965, 2566, 3909, -1525, 3779, -635, 3569, 1225, -3744, -2202, 1642, -184, 3229, -1062, 1576, 2095, 512, 1491, 78, 3186, 2205, -245, 2075, -1386, 2149, 234, 99, -1677, -2795, 3824, 1755, -3487, 863, -752, 701, -1082, -803, -2117, 1718, -1578, 166, 3643, -1759, -2755, -2706, 72, -953, -134, 2011, -1843, -2419, -643, 832, 1966, -2349, -1990, 132, -174, -3107, -3644, -323, 932, 2702, -228, -2887, -3007, 527, -3221, 99, 2850, 3731, 17, -3930, 143, -2155, -2557, -2066, -159, 3635, -3506, 1357, 675, -2379, -3645, 2289, 1222, 3513, 2380, 1862, 1566, -3431, -1979, 2372, 1542, -3832, -2768, -1142, 170, -608, 438, -1594, -2768, -2905, -2550, 1807, 3644, 841, -2380, -3268, 2040, 1725, 19, 3121, -2093, -923, 490, -3945, -284, 972, 2599, -803, 3293, -2299, -2407, -1451, 1923, -3141, -1284, -2176, 3703, 1143, 3283, -1290, 47, 1962, -3506, 1919, -1917, 2412, 2772, 780, 3844, -2209, 2420, -1128, 1312, 174, -1843, 813, -1405, 2569, 1441, 3384, -2910, 3760, -1086, -1007, 3694, -2887, 1243, -2223, -1810, 2407, 3059, 2577, -3934, 3100, -3079, 3756, 440, 104, 2408, -1928, 1529, 1887, -1910, 3387, -3462, -2128, -409, 1935, -2163, -1688, 2316, -718, 1143, -1338, 3718, -1327, -2822, -554, 3502, -3045, -578, 1634, -353, 3581, 2609, 738, 1123, -2555, -270, 844, 731, 1797, -1847, 701, -1492, 42, 558, 713, 801, -2603, 1474, 1492, -1093, 3368, 1397, -1898, 719, -2631, -112, -761, -2183, 561, 1292, 449, 3974, 464, -3055, -3491, 825, -5, 1966, 499, -3875, -3630, 3322, -3844, -1511, -3832, 204, -1652, 2741, -1980, -1554, -2653, 2989, 1661, -283, 994, 2173, -318, -56, 3267, 2830, 3917, 1442, -1613, 3259, -811, -2889, 2116, -2078, 103, 1156, 2693, -1855, 1075, 424, -2856, -2674, -75, 3410, -499, 80, -1377, -1879, -1374, 1952, -3168, -125, 2624, -1479, -384, -3795, -643, -1370, -559, -1862, 2887, 744, 1745, -2825, 245, -3478, 748, 2119, -2010, 1003, 994, -2269, 702, -253, 1676, -1133, -2786, -1624, 458, 79, -1758, -3190, 2737, -3447, 61, 2145, -3380, 1599, 817, -2019, -12, 822, 1412, 910, -183, 821, -1766, 1549, -2893, -879, 2040, -1328, -3170, 2745, 3597, -3705, 970, -2082, 2326, -3918, -131, 1037, 3789, 1434, -2121, -3432, -3581, 3586, -1869, -86, -3926, -2934, 646, 3036, -2296, 38, -3665, -3630, -3735, -3870, 3611, -742, 52, -1715, 2634, -3168, 1691, -815, -1762, 2622, 2563, 2583, -3912, -3022, 3327, 2790, -1003, 3948, 1168, -2454, 494, 89, -908, -1516, 3534, -580, -2596, -2062, 2217, -677, -2366, 2775, -394, 3208, -1685, -954, -139, -936, -1280, 2536, 872, -1740, -3433, 1290, -1786, 1108, -1539, 23, 697, 3256, -3636, -1865, -1821, -58, 2289, -968, 1360, 770, 1342, 1491, -1706, 1942, 1987, -657, -2322, 2776, 962, -2856, -642, -898, -3767, -1040, 91, -2750, 2194, 2276, 3919, 573, 2909, -2707, -71, -1764, 1550, -2554, -3019, 391, -2405, 594, -651, -245, 3994, -3981, -3253, -2651, 363, 3419, -1662, 3998, 143, 900, -1518, -1800, 1286, 1871, 1531, -1902, 2743, -694, -43, 3438, 275, -900, 381, 2532, 1862, -2575, -1234, 2769, -1247, -2163, 2886, 1745, 3788, 1808, -117, -1617, 1910, 2338, -2296, 3141, 3973, -1730, 1884, -499, 3598, -1165, 1030, -2173, 3982, -1725, 2179, -3260, 2095, -1445, -606, -1618, -1409, 602, 728, 718, -2375, -3384, -640, 2722, 366, -3949, -1684, -3690, 970, -3755, -142, 958, 394, 3392, 2279, -212, 95, 1554, 354, -3548, 2290, 583, -3449, -693, -887, -1981, -1615, 1704, 3384, 999, -351, 1104, -2882, 1217, 2247, 3304, 2114, 346, 3696, -2645, 2701, -1963, -2378, -1044, 1226, -1534, 3835, 1140, 1013, 2645, -1784, -3849, -2778, 3959, 1766, -1842, -3427, 3056, 2451, -393, -939, 1015, 560, 2807, 210, 930, -1779, 118, -2671, 1719, -2469, -2717, 2538, 550, -597, -2664, -3573, 2164, 3127, -1198, -2207, -2868, 748, 977, -2735, -1004, -2789, 2059, 3030, -1282, -3154, 2156, -318, 3482, 529, -3690, -3367, 1775, -1741, -2451, -2512, -3401, -3287, 1859, -3986, 1673, 394, -2098, -137, 25, -242, -774, -3992, -3325, 1564, 3069, -2293, 1060, -48, -2198, 2165, 2138, 3788, -2743, -1402, 623, -2363, 2122, 3349, -3847, -679, -1751, 2336, -3388, 649, -1524, -3356, 237, 1800, -3620, -110, -584, 1289, 31, 2323, -3878, 2444, -2590, 1765, -1443, -2888, -3319, -3180, 1161, 910, 2423, 3925, 2264, 2959, 1561, 50, -636, 3777, -106, -3740, 2456, 318, 2010, -1512, -2434, 2191, 1726, -3713, 2591, -1012, 3396, 3131, 1645, 1689, 2761, -1724, 1083, 9, -1656, 2411, 3575, -1434, -100, 964, -1581, 2173, -1668, -1697, -3583, -1481, -1247, 149, -1102, -3352, 1061, 1465, 2615, -1002, 3695, -2707, 3792, -1951, 1150, -2327, 483, 2801, -1641, 3712, -2449, -2967, -642, -1196, 2092, 1977, -3854, 1304, 470, -3815, 1033, -3529, -3646, -2335, 2573, -1849, 3530, -885, -2575, -1835, -3608, 1279, 1903, -2229, 570, -9, 2293, 1747, 2317, -553, -733, -926, 1939, -2493, 3085, -3806, -1152, -1280, -153, -3601, -3384, -2356, 2491, -1160, -956, 3607, 2422, 978, -3741, -2964, -1211, 362, -2569, 972, 3479, 707, 699, -3166, -3346, -369, -1460, 2935, -3737, -3960, 834, -3584, 1453, 1800, 211, 78, 1649, -3281, 3668, 3143, -3180, -3021, -3557, -1536, -2155, -3889, 2892, 1765, -809, -2251, -3219, -2303, 1175, 119, 3818, -359, 2082, -1868, 313, -3798, -836, 1111, 2852, 1541, 2214, -2987, 0, -264, -3971, -1576, -3589, 2195, -654, 2799, 507, -1473, -2375, -569, -2484, -1525, 654, -2588, 890, -697, -1180, 3552, 3529, 3264, -3317, 2052, 2113, -3110, 1436, -1455, 1050, 1926, 3782, -3760, 3777, 3981, -3110, 3094, -1368, 3003, -2728, -1337, 1064, 110, -2245, -1205, -3318, -2901, -809, 2614, -3966, 420, 1506, 666, 1038, -2514, 754, -416, -1368, -2403, 2347, 2216, 3916, 2147, 3377, 761, -3941, -3612, -3125, -3082, 1038, 317, -1646, 979, 1241)), false),
			Arguments.of(new ArrayList<String>(Arrays.asList("a", "b", "e", "c")), false),
			Arguments.of(new ArrayList<String>(Arrays.asList("bat", "ant", "dog", "cat", "eel", "ibx", "fox", "gnu", "cow", "pig")), false),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(-31,-100,3,3,3,3,3,3,5,4,4,4,4,2,-5)), false),
			Arguments.of(new ArrayList<Integer>(Arrays.asListtrue)
		);
	}
	
	public static Stream<Arguments> sortListReverseArgs(){
		return Stream.of(
			Arguments.of(new ArrayList<Integer>(Arrays.asList(5,4,3,2,1)), true),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(1,2,34,4,5)), false),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(1)), true),
			Arguments.of(new ArrayList<Integer>(Arrays.asList()), true),
			Arguments.of(new ArrayList<Integer>(Arrays.asList(5,5,5,5,5)), true),
			Arguments.of(new ArrayList<String>(Arrays.asList("cam")), true),
			Arguments.of(new ArrayList<String>(Arrays.asList("d","c","b","a")), true),
			Arguments.of(new ArrayList<String>(Arrays.asList()), true),
			Arguments.of(new ArrayList<String>(Arrays.asList("a", "b", "e", "c")), false),
			Arguments.of(new ArrayList<String>(Arrays.asList("bat", "ant", "dog", "cat", "eel", "ibx", "fox", "gnu", "cow", "pig")), false)
		);
	}

} 